name: Frontend CI

on:
  push:
    branches:
      - main
      - docker-main 
  pull_request:
    branches:
      - main
      - docker-main

jobs:
  frontend-setup:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      # Checkout code and submodules
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Ensure npm cache directory exists (for macOS/Linux)
      - name: Ensure npm cache directory exists
        if: runner.os != 'Windows'
        run: mkdir -p ~/.npm

      # Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      # Install dependencies
      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      # Lint frontend code
      - name: Lint frontend code
        run: |
          cd frontend
          npx eslint src --ext .js,.jsx,.ts,.tsx,.json

      # Format frontend code with Prettier
      - name: Format frontend code
        run: |
          cd frontend
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,scss,md}"

      # Build frontend
      - name: Build frontend
        run: |
          cd frontend
          npm run build

      # Run npm audit for security checks
      - name: Run ESLint Security Checks
        run: |
          cd frontend
          npm audit --omit=dev --audit-level=critical || true
